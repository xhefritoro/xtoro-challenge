# Sentra Email Scanner - CI/CD Pipeline
# Solutions Architecture: Automated testing, security scanning, and deployment

name: Sentra Scanner CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  AWS_REGION: 'us-east-1'

jobs:
  # =============================================================================
  # CODE QUALITY & SECURITY SCANNING
  # =============================================================================
  
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Code formatting check (Black)
      run: |
        black --check --diff src/ tests/
    
    - name: Linting (Flake8)
      run: |
        flake8 src/ tests/ --max-line-length=100 --ignore=E203,W503
    
    - name: Type checking (MyPy)
      run: |
        mypy src/ --ignore-missing-imports
    
    - name: Security scanning (Bandit)
      run: |
        bandit -r src/ -f json -o bandit-report.json
    
    - name: Dependency vulnerability check (Safety)
      run: |
        safety check --json --output safety-report.json
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # =============================================================================
  # UNIT TESTING WITH COVERAGE
  # =============================================================================
  
  test:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run unit tests with coverage
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-fail-under=80
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        fail_ci_if_error: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          coverage.xml
          htmlcov/

  # =============================================================================
  # TERRAFORM VALIDATION & PLANNING
  # =============================================================================
  
  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ~1.0
    
    - name: Terraform Format Check
      run: |
        cd terraform
        terraform fmt -check -recursive
    
    - name: Terraform Init
      run: |
        cd terraform
        terraform init -backend=false
    
    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate
    
    - name: TFSec Security Scan
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        soft_fail: false
        working_directory: terraform

  # =============================================================================
  # LAMBDA PACKAGE BUILD
  # =============================================================================
  
  build-lambda:
    name: Build Lambda Package
    runs-on: ubuntu-latest
    needs: [test, terraform-validate]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Create Lambda deployment package
      run: |
        mkdir -p dist
        cd src
        
        # Install dependencies to package
        pip install chardet -t .
        
        # Create deployment zip
        zip -r ../dist/sentra-scanner-${{ github.sha }}.zip .
        
        # Verify package contents
        unzip -l ../dist/sentra-scanner-${{ github.sha }}.zip
    
    - name: Upload Lambda package
      uses: actions/upload-artifact@v3
      with:
        name: lambda-package
        path: dist/sentra-scanner-${{ github.sha }}.zip

  # =============================================================================
  security-report:
    name: Security & Compliance Report
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    if: always()
    
    steps:
    - name: Download security reports
      uses: actions/download-artifact@v3
      with:
        name: security-reports
    
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "Generated: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        
        if [ -f bandit-report.json ]; then
          echo "## Bandit Security Scan" >> security-summary.md
          jq -r '.results | length' bandit-report.json || echo "No security issues found"
        fi
        
        if [ -f safety-report.json ]; then
          echo "## Safety Vulnerability Scan" >> security-summary.md
          jq -r '.vulnerabilities | length' safety-report.json || echo "No vulnerabilities found"
        fi
    
    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md
